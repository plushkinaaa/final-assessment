{
	"info": {
		"_postman_id": "4f91f254-1791-4cff-9dc2-6100c282f0a9",
		"name": "Final assessment Plyukhaeva",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21532171"
	},
	"item": [
		{
			"name": "Authorized requests",
			"item": [
				{
					"name": "Positive checks",
					"item": [
						{
							"name": "get a word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testWord = pm.iterationData.get('testWord') || pm.environment.get('testWord');\r",
											"const expectedWord = pm.iterationData.get('expectedWord') || pm.environment.get('expectedWord');\r",
											"\r",
											"pm.test(`For ${testWord} response content is correct`, function (){\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response.word).to.equal(expectedWord);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('testWord', 'bread');\r",
											"pm.environment.set('expectedWord', 'bread');\r",
											"pm.environment.set('statusCode', 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{testWord}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{testWord}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get word details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testWord = pm.iterationData.get('testWord') || pm.environment.get('testWord');\r",
											"const expectedWord = pm.iterationData.get('expectedWord') || pm.environment.get('expectedWord');\r",
											"const testDetails = pm.iterationData.get('testDetails')||pm.environment.get('testDetails');\r",
											"   \r",
											"    pm.test(`For ${testDetails} word details response content is correct`, function (){\r",
											"        var response = pm.response.json();\r",
											"        pm.expect(response.word).to.equal(expectedWord);\r",
											"        pm.expect(Object.keys(response)).include(testDetails);\r",
											"        pm.expect(Object.keys(response).length).to.eq(2);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('testWord', 'bread');\r",
											"pm.environment.set('expectedWord', 'bread');\r",
											"pm.environment.set('testDetails', 'definitions');\r",
											"pm.environment.set('statusCode', 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{testWord}}",
										"{{testDetails}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative checks",
					"item": [
						{
							"name": "status code 404",
							"item": [
								{
									"name": "get a word with extra space in the end of row",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', 'bread ');\r",
													"pm.environment.set('statusCode', 404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a word with digits only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', '123698745');\r",
													"pm.environment.set('statusCode', 404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a word with spaces only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', '     ');\r",
													"pm.environment.set('statusCode', 404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const testWord = pm.iterationData.get('testWord') || pm.environment.get('testWord');",
											"",
											"",
											"pm.test(`Negative check for ${testWord}`, function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.deep.eq({",
											"    \"success\": false,",
											"    \"message\": \"word not found\"",
											"});",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "status code 400",
							"item": [
								{
									"name": "get a word with special characters only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', '@&***&^^%$%^&*');\r",
													"pm.environment.set('statusCode', 400);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get word details with extra space in the end of row",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', 'milk');\r",
													"pm.environment.set('testDetails', 'definitions ');\r",
													"pm.environment.set('statusCode', 400);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}",
												"{{testDetails}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get word details with digits only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', 'milk');\r",
													"pm.environment.set('testDetails', '1478963258');\r",
													"pm.environment.set('statusCode', 400);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}",
												"{{testDetails}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get word details with special characters only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', 'milk');\r",
													"pm.environment.set('testDetails', '&***&^^%$%^&*');\r",
													"pm.environment.set('statusCode', 400);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}",
												"{{testDetails}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get word details with spaces only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('testWord', 'milk');\r",
													"pm.environment.set('testDetails', '       ');\r",
													"pm.environment.set('statusCode', 400);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"{{testWord}}",
												"{{testDetails}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const testWord = pm.iterationData.get('testWord') || pm.environment.get('testWord');",
											"const testDetails = pm.iterationData.get('testDetails')||pm.environment.get('testDetails');",
											"",
											"pm.test(`Negative check for ${testWord} ${pm.request.url.toString().split('/')[5] || ''}`, function () {",
											"   pm.expect(pm.response.status).to.include('Bad Request');",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{wordsAPIKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "X-RapidAPI-Key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const testWord = pm.iterationData.get('testWord') || pm.environment.get('testWord');",
							"const statusCode = pm.environment.get('statusCode');",
							"pm.test(`Status code for a word '${testWord}' is ${statusCode}`, function () {",
							"    pm.expect(pm.response.code).to.be.eq(statusCode);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Unauthorized requests",
			"item": [
				{
					"name": "get a word without API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testWord = pm.iterationData.get('testWord');\r",
									"\r",
									"pm.test(`For ${testWord} word API key is skipped`, function (){\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('statusCode', 401);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/words/{{testWord}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"{{testWord}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get word details without API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testWord = pm.iterationData.get('testWord');\r",
									"const testDetails = pm.iterationData.get('testDetails')||pm.environment.get('testDetails');\r",
									"\r",
									"pm.test(`For ${testWord}/${testDetails} word details API key is skipped`, function (){\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('statusCode', 401);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"{{testWord}}",
								"{{testDetails}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a word with invalid API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testWord = pm.iterationData.get('testWord');\r",
									"   \r",
									"pm.test(`For ${testWord} word API key is invalid`, function (){\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql('You are not subscribed to this API.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('statusCode', 403);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "123456789",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-RapidAPI-Key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/words/{{testWord}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"{{testWord}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get word details with invalid API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testWord = pm.iterationData.get('testWord');\r",
									"const testDetails = pm.iterationData.get('testDetails')||pm.environment.get('testDetails');\r",
									"\r",
									"pm.test(`For ${testWord}/${testDetails} API key is invalid`, function (){\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql('You are not subscribed to this API.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('statusCode', 403);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "123456789",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-RapidAPI-Key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/words/{{testWord}}/{{testDetails}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"{{testWord}}",
								"{{testDetails}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const statusCode = pm.environment.get('statusCode');",
							"",
							"pm.test(`Status code is ${statusCode}`, function () {",
							"    pm.response.to.have.status(statusCode);",
							"});"
						]
					}
				}
			]
		}
	]
}